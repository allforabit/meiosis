{"version":3,"sources":["webpack://meiosis/webpack/universalModuleDefinition","webpack://meiosis/webpack/bootstrap","webpack://meiosis/./src/meiosis.ts","webpack://meiosis/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","isMeiosisTracerOn","trace","params","update","dataStreams","Error","toJS_1","toJS","model","JSON","parse","stringify","fromJS_1","fromJS","toUpdate_1","toUpdate","bufferedValues_1","bufferedStreamValues_1","devtoolInitialized_1","sendValues_1","liveChange_1","lastStream","length","otherStreamIds_1","otherStreamsById_1","otherStreams","forEach","otherStream","streamId","Date","getTime","push","map","data","type","postMessage","addEventListener","evt","sendValuesBack","streamIds","values","stream","__export"],"mappings":"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","file":"meiosis.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"meiosis\"] = factory();\n\telse\n\t\troot[\"meiosis\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export interface Mapper<A, B> {\n  (value: A): B;\n}\n\nexport interface Stream<T> {\n  /**\n   * Gets the latest value from the stream.\n   */\n  (): T;\n\n  /**\n   * Pushes a new value onto the stream.\n   */\n  (value: T): Stream<T>;\n\n  /**\n   * Maps over a stream.\n   */\n  map<T, R>(mapper: Mapper<T, R>): Stream<R>;\n}\n\nexport interface TraceParameters<M> {\n  update: Stream<any>;\n  dataStreams: Array<Stream<any>>;\n  otherStreams?: Array<Stream<any>>;\n  toJS?: Function;\n  fromJS?: Function;\n  toUpdate?: Function;\n}\n\nexport function isMeiosisTracerOn(): boolean {\n  return window && window[\"__MEIOSIS_TRACER_GLOBAL_HOOK__\"];\n}\n\nexport function trace<M>(params: TraceParameters<M>): void {\n  if (!params.update || !params.dataStreams) {\n    throw new Error(\"Please specify update and dataStreams.\");\n  }\n\n  /*\n  Any change to lastStream automatically re-renders the view.\n\n  \"Live\" changes are changes to the update stream.\n\n  Keep track of the date of the last live change with the liveChange date.\n\n  1. Live change\n  - update the liveChange date\n  - since liveChange !== lastChange, update=true\n  - set lastChange = liveChange\n  - send values to tracer with update=true. This will add to the tracer's history\n    and increase the slider max.\n\n  2. Time-travel change\n  - receive MEIOSIS_RENDER_MODEL with sendValuesBack=false\n  - send the data to the first stream, which then goes thru all streams\n  - the view automatically re-renders\n  - since liveChange === lastChange, update=false\n  - don't send anything back to the tracer.\n\n  3. Typing in model textarea\n  - receive MEIOSIS_RENDER_MODEL with sendValuesBack=true. The tracer needs to be\n    sent the computed values from the other streams.\n  - send the data to the first stream, which then goes thru all streams\n  - the view automatically re-renders\n  - since liveChange === lastChange, update=false\n  - since sendValuesBack=true, send the values to the tracer. But, update=false so\n    this will not add to the tracer's history.\n\n  4. Changes in otherStreams\n  - initially send the ids of the streams\n  - send new values with ids\n  */\n\n  if (isMeiosisTracerOn()) {\n    const toJS: Function = params.toJS || ((model: M) => JSON.parse(JSON.stringify(model)));\n    const fromJS: Function = params.fromJS || ((model: M) => model);\n    const toUpdate: Function = params.toUpdate || ((model: any) => () => model);\n    const bufferedValues: Array<any> = [];\n    const bufferedStreamValues: Array<any> = [];\n    let devtoolInitialized: boolean = false;\n    let sendValues: boolean = true;\n\n    let liveChange = true;\n\n    const lastStream = params.dataStreams[params.dataStreams.length - 1];\n\n    let otherStreamIds: Array<string> = [];\n    let otherStreamsById: any = {};\n\n    if (params.otherStreams && params.otherStreams.length) {\n      params.otherStreams.forEach(otherStream => {\n        const streamId: string = \"stream_\" + new Date().getTime();\n        otherStreamIds.push(streamId);\n        otherStreamsById[streamId] = otherStream;\n\n        otherStream.map(value => {\n          const data: any = { type: \"MEIOSIS_STREAM_VALUE\", value, streamId };\n\n          if (devtoolInitialized) {\n            window.postMessage(data, \"*\");\n          }\n          else {\n            bufferedStreamValues.push(data);\n          }\n        });\n      });\n    }\n\n    window.addEventListener(\"message\", evt => {\n      if (evt.data.type === \"MEIOSIS_RENDER_MODEL\") {\n        sendValues = evt.data.sendValuesBack;\n        liveChange = false;\n        params.update(toUpdate(fromJS(evt.data.model)));\n      }\n      else if (evt.data.type === \"MEIOSIS_TRACER_INIT\") {\n        devtoolInitialized = true;\n\n        if (otherStreamIds.length > 0) {\n          window.postMessage({ type: \"MEIOSIS_STREAM_IDS\", streamIds: otherStreamIds }, \"*\");\n        }\n        bufferedValues.forEach(values => window.postMessage({ type: \"MEIOSIS_VALUES\", values, update: true }, \"*\"));\n        bufferedStreamValues.forEach(data => window.postMessage(data, \"*\"));\n      }\n      else if (evt.data.type === \"MEIOSIS_TRIGGER_STREAM_VALUE\") {\n        const streamId: string = evt.data.streamId;\n        const value: any = evt.data.value;\n\n        otherStreamsById[streamId](value);\n      }\n    });\n\n    lastStream.map(() => {\n      if (sendValues || liveChange) {\n        const values: Array<any> = params.dataStreams.map((stream: Stream<any>) =>\n          ({ value: toJS(stream()) }));\n\n        if (devtoolInitialized) {\n          window.postMessage({ type: \"MEIOSIS_VALUES\", values, update: true }, \"*\");\n        }\n        else {\n          bufferedValues.push(values);\n        }\n      }\n      liveChange = true;\n    });\n\n    // Send ping in case tracer was already loaded.\n    window.postMessage({ type: \"MEIOSIS_PING\" }, \"*\");\n  }\n};\n","export * from \"./meiosis\";\n"],"sourceRoot":""}