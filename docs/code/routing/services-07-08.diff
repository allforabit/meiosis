--- 07-services.js	2019-08-08 12:54:32.000000000 -0400
+++ 08-services.js	2019-10-28 06:34:27.000000000 -0400
@@ -1,10 +1,92 @@
 /* global MeiosisRouting */
-
 const {
   findRouteSegment,
+  findRouteSegmentWithParams,
+  routeTransition,
   whenPresent
 } = MeiosisRouting.state;
 
+import { Route } from "./08-routes";
+
+export const loginService = ({
+  state,
+  patch,
+  previousState
+}) => {
+  const currentLogin = findRouteSegment(
+    patch.route,
+    "Login"
+  );
+  // FIXME: route navigation
+  const previousLogin = findRouteSegment(
+    previousState.route,
+    "Login"
+  );
+
+  if (
+    !currentLogin &&
+    patch.route &&
+    previousLogin &&
+    !state.user &&
+    (state.login.username || state.login.password) &&
+    !confirm("You have unsaved data. Continue?")
+  ) {
+    return {
+      patch: null
+    };
+  }
+
+  if (currentLogin) {
+    return {
+      state: {
+        login: {
+          username: "",
+          password: ""
+        }
+      }
+    };
+  } else if (previousLogin && patch.route) {
+    return { state: { login: null } };
+  }
+};
+
+export const settingsService = ({ state, patch }) => {
+  if (
+    findRouteSegment(patch.route, "Settings") &&
+    !state.user
+  ) {
+    /*
+    return {
+      render: false,
+      next: ({ update }) => {
+        update({
+          route: [
+            Route.Login({
+              message: "Please login.",
+              returnTo: Route.Settings()
+            })
+          ]
+        });
+      }
+    };
+    */
+    return {
+      patch: {
+        route: [
+          Route.Login({
+            message: "Please login.",
+            returnTo: Route.Settings()
+          })
+        ]
+      }
+    };
+  }
+};
+
+export const routeService = state => ({
+  route: routeTransition(state.route)
+});
+
 const teas = [
   {
     id: "t1",
@@ -54,35 +136,64 @@
   return result;
 }, {});
 
-export const teaService = ({ state, update }) => {
-  if (findRouteSegment(state.route.arrive, "Tea")) {
-    setTimeout(() => {
-      update({ teas });
-    }, 500);
-  } else if (findRouteSegment(state.route.leave, "Tea")) {
-    update({ teas: null });
+export const teaService = ({ state, patch }) => {
+  // FIXME: loads even when already on page
+  if (findRouteSegment(patch.route, "Tea")) {
+    return {
+      next: ({ update }) =>
+        setTimeout(() => {
+          update({ teas });
+        }, 500)
+    };
+  } else if (
+    // FIXME
+    findRouteSegment(state.route, "Tea") &&
+    patch.route &&
+    !findRouteSegment(patch.route, "Tea")
+  ) {
+    return { state: { teas: null } };
   }
 };
 
-export const teaDetailService = ({ state, update }) => {
-  whenPresent(
-    findRouteSegment(state.route.arrive, "TeaDetails"),
+const teaDetailArrive = ({ patch }) => {
+  return whenPresent(
+    findRouteSegment(patch.route, "TeaDetails"),
     arrive => {
       const id = arrive.params.id;
       const description = teaMap[id].description;
-      update({ tea: { [id]: description } });
+      return { tea: { [id]: description } };
     }
   );
+};
 
-  whenPresent(
-    findRouteSegment(state.route.leave, "TeaDetails"),
+const teaDetailLeave = ({ state, patch }) => {
+  return whenPresent(
+    findRouteSegment(state.route, "TeaDetails"),
     leave => {
-      const id = leave.params.id;
-      update({ tea: { [id]: undefined } });
+      // FIXME: changing params
+      if (
+        patch.route &&
+        !findRouteSegmentWithParams(
+          patch.route,
+          Route.TeaDetails({ id: leave.params.id })
+        )
+      ) {
+        const id = leave.params.id;
+        return { tea: { [id]: undefined } };
+      }
     }
   );
 };
 
+export const teaDetailService = context => {
+  return {
+    state: [
+      teaDetailArrive(context),
+      teaDetailLeave(context)
+    ]
+  };
+};
+
 export const beverageService = ({ state, update }) => {
   whenPresent(
     findRouteSegment(state.route.arrive, "Beverage"),
@@ -157,16 +268,3 @@
     }
   );
 };
-
-export const loginService = ({ state, update }) => {
-  if (findRouteSegment(state.route.arrive, "Login")) {
-    update({
-      login: {
-        username: "",
-        password: ""
-      }
-    });
-  } else if (findRouteSegment(state.route.leave, "Login")) {
-    update({ login: null });
-  }
-};
